# -*- coding: utf-8 -*-
# @Time    : 2019/11/21 7:29
# @Author   : 高冷
# @FileName  : P133_20-04__name__.py
"""
python中的模块（.py文件）在创建之初会自动加载一些内建变量，__name__就是其中之一。Python模块中通常会定义很多变量和函数，这些变量和函数相当于模块中的一个功能，模块被导入到别的文件中，可以调用这些变量和函数。那么这时 __name__ 的作用就彰显了，它可以标识模块的名字，可以显示一个模块的某功能是被自己执行还是被别的文件调用执行，假设模块A、B，模块A自己定义了功能C,模块B调用模块A，现在功能C被执行了：

如果C被A自己执行，也就是说模块执行了自己定义的功能，那么 __name__=='__main__'

如果C被B调用执行，也就是说当前模块调用执行了别的模块的功能，那么__name__=='A'（被调用模块的名字）

其实换一种说法也就是表示当前程序运行在哪一个模块中


如果C被A自己执行，也就是说模块执行了自己定义的功能，那么 __name__=='__main__'                                  本文件自己执行  __name__=='__main__'

如果C被B调用执行，也就是说当前模块调用执行了别的模块的功能，那么__name__=='A'（被调用模块的名字）                被其他文件掉用 __name__=='A'（被调用模块的名字）

作用为 不会重复调用
"""


def jojo():
    print("hellow world")


if __name__ == '__main__':                 # __name__变量在当前文件为__main__                即 当前 __name__ ==  '__main__':
    jojo()                                  # 在本文件可以执行本文件 但是在其他文件中调用了jojo() , 则__name__  == '文件名' 本文件的jojo函数不会触发

