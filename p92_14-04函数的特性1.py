# 函数的定义
"""函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。
函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。
"""

# 函数命名规则
"""
函数名必须以下划线或字母开头，可以包含任意字母、数字或下划线的组合。不能使用任何的标点符号；
函数名是区分大小写的。
函数名不能是保留字。
"""

# 函数的规则 (与变量命名一样)
'''
1. 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。
2. 任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。
3. 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
4. 函数内容以冒号起始，并且缩进。
5. return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。
'''

# 函数的作用
"""
减少重复代码简写
方便修改,更易扩展
保持代码的一致性
"""

# 函数的循环
def logger():                                    # 这个logger()里面的是形参
    f = open("尼采.txt", 'a')
    f.write('i love me')
    f.close()

aaa = logger()
for aaa in range(10):
    logger()                                     # 这个logger()里面的是实参

#  传递实参：位置实参
"""
关联方式是实参的顺序,这种方法被称为位置实参
def logger(AAA,BBB):
    XXXXXX
    print("HAHA"+AAA+BBB.title())
logger(CCC,DDD)                                    CCC对应着AAA,DDD对应BBB   即CCC实参的值会传递到AAA形参
logger(EEE,FFF)                                    如果需要调用函数多次。只需再次调用logger()即可:
"""

# 传递实参:关键字实参
"""
关联方式是名称与值对
def logger(ZZZ,XXX)                                 ZZZ是名称 而JJJ是值
    XXXXXX                                          
    print("HAHA"+ZZZ+XXX.title())                   
logger(ZZZ="JJJ",XXX="LLL")                         用一个赋值就可以,而不用对应位置
"""

# 传递实参:默认参数
"""
通过形参添加默认值, 如果在调用函数中给形参提供了实参,它将使用指定的实参值,否则,将使用形参的默认值                    //主要是出现多个实参时
def calss(aba,bab,cac="nan")             //比如需要列出一个班的人的信息
    print("name:%s" %aba)
    print("age=%s" %bab)
    print("sex=%s" %cac)   
class("xiaoming",12）                   //这里添加2个实参就可以显示3个实参                          >>>nane = xiaohu
                                                                                                     age  = 1 8
                                                                                                     sex  = nan
                                                                                                     
class("xiaoming",12,"girl"）           //但是如果添加cac指定的实参值则:                             >>>nane = xiaohu
                                                                                                     age  = 18
                                                                                                     sex  = girl
!!!默认参数一定要跟在其他参数后面
"""

# 传递实参: 不定长参数（不命名参数/命名参数）
"""
可变参数就是传入参数是可变的。实参可以是任意个,不过要在形参前面加*
你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。

def abc(*argv)：                      //这里的形参可以是任意,但前面一定要加*
    print(argv)
abc(1,2,3,4,5,6,[7,8])               //这里的实参不命名,即不能加 SUN = 1                                     # 加列表也可以
 
#   传递实参: 命名参数
    加了星号（*）的变量名会存放所有未命名的变量参数。而加(**)的变量名会存放命名的变量参数
def abc(**argv)：                      
    print(argv)
abc(one = 1,two = 2,three = 3)        //这里的实参必须命名,即必须加命名实参  如SEVEN = "7"                   # 键值对 即 字典

注意 : 1.*会以元组的形式导入，这里的实参不命名
       2.**会以字典的形式导入,这里的实参必须命名
       3.还可以命名参数与不命名参数组合在一起,不过无命名参数*一定要放左边,**命名参数一定放右边                     # *koko,**okok
       4.还可以加默认参数             //会替换索引为0的元组的元素,默认参数只能放在左边,除非没有命名参数          # MMM="0",*koko,**okok
       5.优先级从左到右              普通参数,默认参数,不命名参数,命名参数
       
       
def KKK(*koko,**okok):                                                                  def KKK(MMM=0,*koko,**okok,):
    print(MMM)                                                                              print(MMM)
    print(koko,okok)                                                                        print(koko,okok) 
KKK(1,2,3,4,jjj = 5，lll=6)                                                              KKK(1,2,3,4,jjj = 5,lll=6)
 //这里命名参数与不命名参数进行组合输出结果为一半元组,一半字典                                  
                                                                                          >>>1
(1,2, 3, 4) {'jjj': 5, 'lll': 6}                                                          >>>(2, 3, 4) {'jjj': 5, 'lll': 6}

"""